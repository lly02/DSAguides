@using System.Runtime.InteropServices.JavaScript
@using DSAguides.Models.DataStructures.Array;
@using DSAguides.Models.Shared.Nodes.Interface;
@using Models.Shared.Animation
@using Models.Shared.Nodes

@page "/data-structures/array"

<div id="animation" class="w-100">
    <div id="nodes">
        <div class="row m-0">
            @foreach (var node in _nodes!)
            {
                <div class="col node">@node.ElementToString</div>
            }
        </div>
    </div>
    <div id="information">
        <span class="information-text">Information</span>
    </div>
    <div id="options" class="accordion">
        <div class="accordion-item new">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#new-collapse">
                    New
                </button>
            </h2>
            <div id="new-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <input @bind=_newArray />
                    <button @onclick=OnNewArray>Run</button>
                </div>
            </div>
        </div>
        <div class="accordion-item add">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#add-collapse">
                    Add
                </button>
            </h2>
            <div id="add-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <input @bind=_addValue/>
                    <button @onclick=OnAddValue>Run</button>
                </div>
            </div>
        </div>
        <div class="accordion-item remove">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#remove-collapse">
                    Remove
                </button>
            </h2>
            <div id="remove-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <input @bind="RemoveIndex"/>
                    <button @onclick=OnRemove>Run</button>
                </div>
            </div>
        </div>
        <div class="accordion-item clear">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#clear-collapse">
                    Clear
                </button>
            </h2>
            <div id="clear-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <button @onclick=OnClear>Run</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Nodes animation
    INode[]? _nodes;
    AnimationEnum _animation = AnimationEnum.Stopped;

    string _newArray = "0";
    string _addValue = "0";
    string _removeIndex = "0";

    string NewArray
    {
        get => _newArray;
        set => _newArray = value;
    }
    string AddValue
    {
        get => _addValue;
        set => _addValue = value;
    }
    string RemoveIndex {
        get => _removeIndex;
        set => _removeIndex = value;
    }

    void OnNewArray()
    {
        //NewArray = String.Concat(NewArray.Where(c => !Char.IsWhiteSpace(c)));
        //nodes = StringToIntList(NewArray).ToArray();
        if (!StartAnimation()) return;

        while (_animation == AnimationEnum.Playing)
        {
            NewArrayJS(_newArray);
        }
    }

    void OnAddValue()
    {
        AddValueJS(_addValue);
    }

    void OnRemove()
    {
        RemoveIndexJS(_removeIndex);
    }

    void OnClear()
    {
        ClearJS();
    }

    bool StartAnimation()
    {
        if (_animation == AnimationEnum.Playing) return false;
        _animation = AnimationEnum.Playing;
        return true;
    }

    IEnumerable<int> StringToIntList(string s)
    {
        foreach (string str in s.Split(','))
        {
            yield return int.Parse(str);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _nodes = new ArrayNodeFactory().CreateNodes(10);

        await JSHost.ImportAsync("Array", "../Pages/DataStructures/Array.razor.js");
        await base.OnInitializedAsync(); 
    }
}