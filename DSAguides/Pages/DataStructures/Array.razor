@using System.Runtime.InteropServices.JavaScript
@using DSAguides.Interface.Nodes;
@using DSAguides.Interface;
@using DSAguides.Models.DataStructures.Array
@using DSAguides.Models.DataStructures.Array.Model
@using DSAguides.Models.DataStructures.Array.Operations
@using DSAguides.Models.Shared.Animation
@using DSAguides.Helper

@inject ILogger<Array> _logger
@inject IServiceFactory<INodeFactory> _nodeServiceFactory
@inject IServiceFactory<ArrayOperation> _arrayOperation

@page "/data-structures/array"

<div id="animation" class="w-100 mx-0 mx-md-5 mt-5 mx-md-0">
    <div id="nodes">
        <div class="d-flex justify-content-center align-items-center m-1 mt-md-5 mb-md-3 animation-container">
            @foreach (var node in _nodes!)
            {
                <div class="d-flex align-items-center justify-content-center node p-0 h-100">@node.ElementToString</div>
            }
        </div>
    </div>
    <div id="information" class="d-flex align-items-center justify-content-center mb-3">
        <span class="information-text"><b><i>@_information</i></b></span>
    </div>
    <div id="options" class="accordion mx-5 mx-md-0">
        <div class="accordion-item new">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#new-collapse">
                    New
                </button>
            </h2>
            <div id="new-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <EditForm Model="@_newArrayModel" OnValidSubmit="@OnNewArray">
                        <DataAnnotationsValidator />

                        <label>
                            Input up to 10 elements of array separated by commas ("int, int, int,..."):<br />
                            <InputText @bind-Value=_newArrayModel.NewArray />
                            <button type="submit">Run</button>
                            <ValidationMessage For="@(() => _newArrayModel.NewArray)" />
                        </label>
                    </EditForm>
                </div>
            </div>
        </div>
        @*<div class="accordion-item insert">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#add-collapse">
                    Insert
                </button>
            </h2>
            <div id="insert-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <input @bind=InsertValue/>
                    <button @onclick=OnInsertValue>Run</button>
                </div>
            </div>
        </div>
        <div class="accordion-item remove">
            <h2 class="accordion-header">
                <button class="accordion-button" data-bs-toggle="collapse" data-bs-target="#remove-collapse">
                    Remove
                </button>
            </h2>
            <div id="remove-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <input @bind="RemoveIndex"/>
                    <button @onclick=OnRemove>Run</button>
                </div>
            </div>
        </div>*@
        <div class="accordion-item clear">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#clear-collapse">
                    Clear
                </button>
            </h2>
            <div id="clear-collapse" class="accordion-collapse collapse">
                <div class="accordion-body">
                    <button @onclick=OnClear>Run</button>
                </div>
            </div>
        </div>
    </div>
    <div id="about" class="mx-5 my-3 mx-md-0">
        <p>Definition: <i><b>An array is a collection of items of same data type stored at contiguous memory locations.</b></i></p>

        <p>In an array, each every index is <b>assigned an element which can be accessed using the respective index.</b></p>
        <p>An array is also always of a <b>fixed size</b>, this means that it is not possible to alter the size after initialized. However, the array remains <b>mutable</b>, the element of each index can be changed.</p>
        <p>When attempting to <b>INSERT</b> or <b>DELETE</b> at any position, a new array will be initialized. The reason being the data are stored at contiguous memory location, the next memory location could be occupied which results in the need to reassign the data to another memory location. Both operation hence has a time complexity of <b>O(n)</b>.</p>
        <p>The inserting and deleting could be done in <b>O(1)</b> by using a <a href="/algorithms/linked-list">linked-list</a> data structure.</p>
    </div>
</div>

@code {
    private NewArrayModel _newArrayModel = new();

    //string _newArray = "0";
    //string _insertValue = "0";
    //string _removeIndex = "0";

    //string NewArray
    //{
    //    get => _newArray;
    //    set => _newArray = value;
    //}
    //string InsertValue
    //{
    //    get => _insertValue;
    //    set => _insertValue = value;
    //}
    //string RemoveIndex {
    //    get => _removeIndex;
    //    set => _removeIndex = value;
    //}

    private INodeFactory? _arrayFactory;
    private INode[]? _nodes;
    private string _information = "Array";
    private AnimationEnum _animationState = AnimationEnum.Stopped;
    private int delay = 500;

    public INode[]? Nodes {
        get => _nodes;
        set => _nodes = value;
    }
    public string Information
    {
        get => _information;
        set => _information = value;
    }

    async Task OnNewArray()
    {
        _logger.LogInformation("Running new array");
        if (!StartAnimation()) return;

        int[] intArray = Utility.StringToIntArray(_newArrayModel.NewArray!);
        INode[] result = _arrayFactory!.CreateNodes(intArray);
        _logger.LogInformation("NewArray received: {NewArray}", _newArrayModel.NewArray!);
        ArrayOperation operation = _arrayOperation.GetInstance("new");
        operation.Page = this;
        operation.EndState = result;

        _logger.LogInformation("Animation playing");
        while (_animationState == AnimationEnum.Playing)
        {
            operation.NextFrame();
            StateHasChanged();

            _animationState = operation.Done ? AnimationEnum.Stopped : _animationState;

            await Delay();
        }
        _information = "Array";
        StateHasChanged();

        _logger.LogInformation("Animation ended");
    }

    //async Task OnInsertValue()
    //{
    //    _logger.LogInformation("Running insert element");
    //    if (!StartAnimation()) return;

    //    INode[] result = Utility.AppendNode(_nodes!, int.Parse(InsertValue));
    //    _logger.LogInformation("Add value received: {AddValue}", InsertValue);
    //    ArrayOperation operation = new ArrayAddOperation(_nodes!, result);

    //    _logger.LogInformation("Animation playing");
    //    while (_animationState == AnimationEnum.Playing)
    //    {
    //        _nodes = operation.NextFrame();

    //        StateHasChanged();

    //        _animationState = operation.Done ? AnimationEnum.Stopped : _animationState;

    //        await Delay();
    //    }
    //    _logger.LogInformation("Animation ended");
    //}

    //async Task OnRemove()
    //{
    //    _logger.LogInformation("Running remove element");
    //    if (!StartAnimation()) return;

    //    INode[] result = Utility.RemoveIndex(_nodes!, int.Parse(RemoveIndex));
    //    _logger.LogInformation("Remove index received: {RemoveIndex}", RemoveIndex);
    //    ArrayOperation operation = new ArrayRemoveOperation(_nodes!, result);

    //    _logger.LogInformation("Animation playing");
    //    while (_animationState == AnimationEnum.Playing)
    //    {
    //        _nodes = operation.NextFrame();

    //        StateHasChanged();

    //        _animationState = operation.Done ? AnimationEnum.Stopped : _animationState;

    //        await Delay();
    //    }
    //    _logger.LogInformation("Animation ended");
    //}

    async Task OnClear()
    {
        _logger.LogInformation("Running clear array");
        if (!StartAnimation()) return;

        INode[] result = _arrayFactory!.CreateNodes(_nodes!.Length);
        ArrayOperation operation = _arrayOperation.GetInstance("clear");
        operation.Page = this;
        operation.EndState = result;

        _logger.LogInformation("Animation playing");
        while (_animationState == AnimationEnum.Playing)
        {
            operation.NextFrame();
            StateHasChanged();

            _animationState = operation.Done ? AnimationEnum.Stopped : _animationState;

            await Delay();
        }
        _information = "Array";
        StateHasChanged();

        _logger.LogInformation("Animation ended");
    }

    bool StartAnimation()
    {
        if (_animationState == AnimationEnum.Playing) return false;
        _animationState = AnimationEnum.Playing;
        return true;
    }

    async Task Delay()
    {
        await Task.Delay(delay);
    }

    protected override async Task OnInitializedAsync()
    {
        _arrayFactory = _nodeServiceFactory.GetInstance("array");
        _nodes = _arrayFactory.CreateNodes(10);

        await base.OnInitializedAsync(); 
    }
}